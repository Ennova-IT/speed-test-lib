{
  "name": "Speed Test library",
  "tagline": "Speed Test library for Java/Android",
  "body": "# Speed Test library\r\n\r\nhttp://akinaru.github.io/speed-test-lib\r\n\r\n[![Build Status](https://travis-ci.org/akinaru/speed-test-lib.svg?branch=master)](https://travis-ci.org/akinaru/speed-test-lib)\r\n[![Download](https://api.bintray.com/packages/akinaru/maven/speedtest/images/download.svg) ](https://bintray.com/akinaru/maven/speedtest/_latestVersion)\r\n[![Coverage Status](https://coveralls.io/repos/github/akinaru/speed-test-lib/badge.svg?branch=master)](https://coveralls.io/github/akinaru/speed-test-lib?branch=master)\r\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/55e8e347e0d24566b37fe43799665e40)](https://www.codacy.com/app/kiruazoldik92/speed-test-lib?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=akinaru/speed-test-lib&amp;utm_campaign=Badge_Grade)\r\n[![Javadoc](http://javadoc-badge.appspot.com/com.github.akinaru/speedtest.svg?label=javadoc)](http://javadoc-badge.appspot.com/com.github.akinaru/speedtest)\r\n[![License](http://img.shields.io/:license-mit-blue.svg)](LICENSE.md)\r\n\r\nSpeed Test library for Java / Android :\r\n\r\n* speed test download with transfer rate output\r\n* speed test upload with transfer rate output\r\n* download and upload progress monitoring\r\n* speed test server / port / uri can be configured easily\r\n\r\n<hr/>\r\n\r\n* For download process, library will download file from given speed test server parameters and calculate transfer rate\r\n* For upload process, library will generate a random file with a given size and will upload this file to a server calculating transfer rate\r\n\r\nNo external file are required and no file are stored in Hard Disk.\r\n\r\n## Include in your project\r\n\r\n* with Gradle, from jcenter :\r\n\r\n```\r\ncompile 'com.github.akinaru:speedtest:1.16'\r\n```\r\n\r\n## How to use ?\r\n\r\n#### Instanciate SpeedTest class\r\n\r\n```\r\nSpeedTestSocket speedTestSocket = new SpeedTestSocket();\r\n```\r\n#### Add a listener to monitor\r\n\r\n* download process result with ``onDownloadPacketsReceived`` callback\r\n* upload process result with ``onUploadPacketsReceived`` callback\r\n* download progress with ``onDownloadProgress`` callback\r\n* upload progress with ``onUploadProgress`` callback\r\n* download error catch with ``onDownloadError``\r\n* upload error catch with ``onUploadError``\r\n\r\n```\r\nspeedTestSocket.addSpeedTestListener(new ISpeedTestListener() {\r\n\r\n\t@Override\r\n\tpublic void onDownloadPacketsReceived(int packetSize, float transferRateBitPerSeconds, float transferRateOctetPerSeconds) {\r\n\t\tSystem.out.println(\"download transfer rate  : \" + transferRateBitPerSeconds + \" bps\");\r\n\t\tSystem.out.println(\"download transfer rate  : \" + transferRateOctetPerSeconds + \"Bps\");\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onDownloadError(SpeedTestError errorCode, String message) {\r\n\t\tSystem.out.println(\"Download error \" + errorCode + \" occured with message : \" + message);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onUploadPacketsReceived(int packetSize, float transferRateBitPerSeconds, float transferRateOctetPerSeconds) {\r\n\t\tSystem.out.println(\"download transfer rate  : \" + transferRateBitPerSeconds + \" bps\");\r\n\t\tSystem.out.println(\"download transfer rate  : \" + transferRateOctetPerSeconds + \"Bps\");\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onUploadError(SpeedTestError errorCode, String message) {\r\n\t\tSystem.out.println(\"Upload error \" + errorCode + \" occured with message : \" + message);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onDownloadProgress(float percent, SpeedTestReport downloadReport) {\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onUploadProgress(float percent, SpeedTestReport uploadReport) {\r\n\t}\r\n\r\n});\r\n\r\n```\r\n\r\n#### Start Download speed test\r\n\r\nDownload a single file from a server : \r\n\r\n``void startDownload(String hostname, int port, String uri)``\r\n\r\n| params     |  type     |       description                    |\r\n|------------|-----------|--------------------------------------|\r\n| `hostname` |  String   | server hostname                      |  \r\n| `port`     |  int      | server port                          |\r\n| `uri`      |  String   | uri to fetch your file from server   |  \r\n\r\n```\r\nspeedTestSocket.startDownload(\"ipv4.intuxication.testdebit.info\", 80,\"/fichiers/10Mo.dat\");\r\n```\r\nYou can wait for test completion with ``closeSocketJoinRead()`` which is prefered to ``closeSocket()`` since it join reading thread before resuming application.\r\n\r\n```\r\nspeedTestSocket.closeSocketJoinRead();\r\n```\r\n\r\n#### Start Upload speed test\r\n\r\nUpload a single file with specified size to a server :\r\n\r\n```\r\nvoid startUpload(String hostname, int port, String uri, int fileSizeOctet)\r\n```\r\n\r\n| params     |  type     |       description                    |\r\n|------------|-----------|--------------------------------------|\r\n| `hostname` |  String   | server hostname                      |  \r\n| `port`     |  int      | server port                          |\r\n| `uri`      |  String   | uri to fetch your file from server   |  \r\n| `fileSizeOctet`     |  int      | the file size to be uploaded to server (file will be generated randomly and sent to speed test server)                          |\r\n\r\nHere is an example for a file of 10Moctet :\r\n```\r\nspeedTestSocket.startUpload(\"1.testdebit.info\", 80, \"/\", 10000000);\r\n```\r\n### Download/Upload during a fix amount of time\r\n\r\nIf you want to download/upload during a fix value, you can begin download/upload and then invoke : \r\n\r\n```\r\nspeedTestSocket.forceStopTask();\r\n```\r\n\r\nThe following will start downloading a file of 100Mo but will stop downloading 15 seconds later : \r\n\r\n```\r\nfinal Timer timer = new Timer();\r\n\r\n/* instanciate speed test */\r\nfinal SpeedTestSocket speedTestSocket = new SpeedTestSocket();\r\n\r\n/* add a listener to wait for speed test completion and progress */\r\nspeedTestSocket.addSpeedTestListener(new ISpeedTestListener() {\r\n\r\n    @Override\r\n    public void onDownloadPacketsReceived(long packetSize, float transferRateBitPerSeconds, float transferRateOctetPerSeconds) {\r\n    }\r\n\r\n    @Override\r\n    public void onDownloadError(SpeedTestError speedTestError, String errorMessage) {\r\n        if (speedTestError != SpeedTestError.FORCE_CLOSE_SOCKET) {\r\n            if (timer != null) {\r\n                timer.purge();\r\n                timer.cancel();\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onUploadPacketsReceived(long packetSize, float transferRateBitPerSeconds, float transferRateOctetPerSeconds) {\r\n    }\r\n\r\n    @Override\r\n    public void onUploadError(SpeedTestError speedTestError, String errorMessage) {\r\n        if (speedTestError != SpeedTestError.FORCE_CLOSE_SOCKET) {\r\n            if (timer != null) {\r\n                timer.purge();\r\n                timer.cancel();\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onDownloadProgress(float percent, SpeedTestReport downloadReport) {\r\n    }\r\n\r\n    @Override\r\n    public void onUploadProgress(float percent, SpeedTestReport uploadReport) {\r\n    }\r\n});\r\n\r\nTimerTask stopTask = new TimerTask() {\r\n    @Override\r\n    public void run() {\r\n        System.out.println(\"--------------- FINISH REPORT -----------------------------\");\r\n        SpeedTestReport downloadReport = speedTestSocket.getLiveDownloadReport();\r\n        System.out.println(\"---------------current download report--------------------\");\r\n        System.out.println(\"progress             : \" + downloadReport.getProgressPercent() + \"%\");\r\n        System.out.println(\"transfer rate bit    : \" + downloadReport.getTransferRateBit() + \"b/s\");\r\n        System.out.println(\"transfer rate octet  : \" + downloadReport.getTransferRateOctet() + \"B/s\");\r\n        System.out.println(\"downloaded for now   : \" + downloadReport.getTemporaryPacketSize() + \"/\" + downloadReport.getTotalPacketSize());\r\n        if (downloadReport.getStartTime() > 0) {\r\n            System.out.println(\"amount of time       : \" + ((downloadReport.getReportTime() - downloadReport.getStartTime()) / 1000) + \"s\");\r\n        }\r\n        speedTestSocket.forceStopTask();\r\n        if (timer != null) {\r\n            timer.cancel();\r\n            timer.purge();\r\n        }\r\n    }\r\n};\r\ntimer.schedule(stopTask, 15000);\r\nspeedTestSocket.startDownload(\"1.testdebit.info\", 80, \"/fichiers/100Mo.dat\");\r\n\r\n```\r\n\r\n### Default report interval\r\n\r\nBy default, progress report is achieved as following :\r\n\r\n* for upload, a progress report is sent and trigger `onUploadProgress` each time `uploadChunkSize` number of packet is sent. The default value for `uploadChunkSize` is 65535 but you can change with `speedTestSocket.setUploadChunkSize(int chunkSize)`\r\n\r\n* for download, a progress report is sent and trigger `onDownloadProgress` each time a chunk of data is read from the downlink socket\r\n\r\n### Set your own report interval\r\n\r\nIf you want to set a custom report interval, you can use a task scheduled at fixed rate to retrieve report with `speedTestSocket.getLiveDownloadReport()` or `speedTestSocket.getLiveUploadReport()` depending if you want download or upload report.\r\n\r\nThe following will start uploading a file of 10Mo and request reports every 400ms :\r\n\r\n```\r\nfinal Timer timer = new Timer();\r\n\r\n/* instanciate speed test */\r\nfinal SpeedTestSocket speedTestSocket = new SpeedTestSocket();\r\n\r\n/* add a listener to wait for speed test completion and progress */\r\nspeedTestSocket.addSpeedTestListener(new ISpeedTestListener() {\r\n\r\n    @Override\r\n    public void onDownloadPacketsReceived(long packetSize, float transferRateBitPerSeconds, float transferRateOctetPerSeconds) {\r\n    }\r\n\r\n    @Override\r\n    public void onDownloadError(SpeedTestError speedTestError, String errorMessage) {\r\n        if (speedTestError != SpeedTestError.FORCE_CLOSE_SOCKET) {\r\n            if (timer != null) {\r\n                timer.purge();\r\n                timer.cancel();\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onUploadPacketsReceived(long packetSize, float transferRateBitPerSeconds, float transferRateOctetPerSeconds) {\r\n    }\r\n\r\n    @Override\r\n    public void onUploadError(SpeedTestError speedTestError, String errorMessage) {\r\n        if (speedTestError != SpeedTestError.FORCE_CLOSE_SOCKET) {\r\n            if (timer != null) {\r\n                timer.purge();\r\n                timer.cancel();\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onDownloadProgress(float percent, SpeedTestReport downloadReport) {\r\n    }\r\n\r\n    @Override\r\n    public void onUploadProgress(float percent, SpeedTestReport uploadReport) {\r\n    }\r\n});\r\n\r\nTimerTask task = new TimerTask() {\r\n\r\n    @Override\r\n    public void run() {\r\n\r\n        if (speedTestSocket.getSpeedTestMode() == SpeedTestMode.UPLOAD) {\r\n\r\n            SpeedTestReport uploadReport = speedTestSocket.getLiveUploadReport();\r\n            System.out.println(\"---------------current upload report--------------------\");\r\n            System.out.println(\"progress             : \" + uploadReport.getProgressPercent() + \"%\");\r\n            System.out.println(\"transfer rate bit    : \" + uploadReport.getTransferRateBit() + \"b/s\");\r\n            System.out.println(\"transfer rate octet  : \" + uploadReport.getTransferRateOctet() + \"B/s\");\r\n            System.out.println(\"uploaded for now     : \" + uploadReport.getTemporaryPacketSize() \r\n                                    + \"/\" + uploadReport.getTotalPacketSize());\r\n            System.out.println(\"amount of time       : \" + \r\n                                ((uploadReport.getReportTime() - uploadReport.getStartTime()) / 1000) + \"s\");\r\n            System.out.println(\"--------------------------------------------------------\");\r\n\r\n        } else if (speedTestSocket.getSpeedTestMode() == SpeedTestMode.DOWNLOAD) {\r\n\r\n            SpeedTestReport downloadReport = speedTestSocket.getLiveDownloadReport();\r\n            System.out.println(\"---------------current download report--------------------\");\r\n            System.out.println(\"progress             : \" + downloadReport.getProgressPercent() + \"%\");\r\n            System.out.println(\"transfer rate bit    : \" + downloadReport.getTransferRateBit() + \"b/s\");\r\n            System.out.println(\"transfer rate octet  : \" + downloadReport.getTransferRateOctet() + \"B/s\");\r\n            System.out.println(\"downloaded for now   : \" + downloadReport.getTemporaryPacketSize() \r\n                                    + \"/\" + downloadReport.getTotalPacketSize());\r\n            System.out.println(\"amount of time       : \"\r\n                                    + ((downloadReport.getReportTime() - downloadReport.getStartTime()) / 1000) + \"s\");\r\n        }\r\n    }\r\n};\r\n\r\n// scheduling the task at interval\r\ntimer.scheduleAtFixedRate(task, 0, 400);\r\n\r\nspeedTestSocket.startUpload(\"1.testdebit.info\", 80, \"/\", 10000000);\r\n```\r\n\r\n### Chain download/upload requests\r\n\r\nIt is possible to chain download/upload requests with `startDownloadRepeat` & `startUploadRepeat` API during a fixed time called `repeatWindow` with a report interval named `reportPeriodMillis`\r\n\r\n*  chain download requests\r\n\r\n```\r\n/**\r\n * Start repeat download task.\r\n *\r\n * @param hostname           server hostname\r\n * @param port               server port\r\n * @param uri                uri to fetch to download file\r\n * @param repeatWindow       time window for the repeated download in milliseconds\r\n * @param reportPeriodMillis time interval between each report in milliseconds\r\n * @param repeatListener     listener for download repeat task completion & reports\r\n */\r\npublic void startDownloadRepeat(final String hostname,\r\n                                final int port,\r\n                                final String uri,\r\n                                final int repeatWindow,\r\n                                final int reportPeriodMillis,\r\n                                final IRepeatListener repeatListener)\r\n```\r\n\r\n* chain upload requests\r\n\r\n```\r\n/**\r\n * Start repeat upload task.\r\n *\r\n * @param hostname           server hostname\r\n * @param port               server port\r\n * @param uri                uri to fetch to download file\r\n * @param repeatWindow       time window for the repeated upload in milliseconds\r\n * @param reportPeriodMillis time interval between each report in milliseconds\r\n * @param repeatListener     listener for upload repeat task completion & reports\r\n */\r\npublic void startUploadRepeat(final String hostname,\r\n                              final int port,\r\n                              final String uri,\r\n                              final int repeatWindow,\r\n                              final int reportPeriodMillis,\r\n                              final int fileSizeOctet,\r\n                              final IRepeatListener repeatListener)\r\n```\r\n\r\n### Get live download & upload\r\n\r\n* retrieve current download report : \r\n```\r\nSpeedTestReport getLiveDownloadReport()\r\n```\r\n\r\n* retrieve current upload report : \r\n```\r\nSpeedTestReport getLiveUploadReport()\r\n```\r\n\r\n### Set size of each packet sent to upload server\r\n\r\n```\r\nspeedTestSocket.setUploadChunkSize(65535);\r\n```\r\n\r\n### Set socket timeout value\r\n\r\nYou can set download/upload socket timeout in milliseconds :\r\n\r\n```\r\nspeedTestSocket.setSocketTimeout(5000);\r\n```\r\n\r\n## Android Integration\r\n\r\n* add Internet permission to manifest : \r\n```\r\n<uses-permission android:name=\"android.permission.INTERNET\" />\r\n```\r\n\r\n* use an `AsyncTask` to run your speed test :\r\n\r\n```\r\npublic class SpeedTestTask extends AsyncTask<Void, Void, String> {\r\n\r\n    @Override\r\n    protected String doInBackground(Void... params) {\r\n\r\n        SpeedTestSocket speedTestSocket = new SpeedTestSocket();\r\n        speedTestSocket.addSpeedTestListener(new ISpeedTestListener() {\r\n\r\n            @Override\r\n            public void onDownloadPacketsReceived(int packetSize, \r\n            \t\t\t\t\t\t\t\t\tfloat transferRateBitPerSeconds, \r\n            \t\t\t\t\t\t\t\t\tfloat transferRateOctetPerSeconds) {\r\n                Log.i(\"speed-test-app\",\"download transfer rate  : \" + transferRateOctetPerSeconds + \"Bps\");\r\n            }\r\n\r\n            @Override\r\n            public void onDownloadError(SpeedTestError errorCode, String message) {\r\n                Log.i(\"speed-test-app\",\"Download error \" + errorCode + \" occured with message : \" + message);\r\n            }\r\n\r\n            @Override\r\n            public void onUploadPacketsReceived(int packetSize, \r\n            \t\t\t\t\t\t\t\t\tfloat transferRateBitPerSeconds, \r\n            \t\t\t\t\t\t\t\t\tfloat transferRateOctetPerSeconds) {\r\n                Log.i(\"speed-test-app\",\"download transfer rate  : \" + transferRateOctetPerSeconds + \"Bps\");\r\n            }\r\n\r\n            @Override\r\n            public void onUploadError(SpeedTestError errorCode, String message) {\r\n                Log.i(\"speed-test-app\",\"Upload error \" + errorCode + \" occured with message : \" + message);\r\n            }\r\n\r\n            @Override\r\n            public void onDownloadProgress(float percent,SpeedTestReport downloadReport) {\r\n            }\r\n\r\n            @Override\r\n            public void onUploadProgress(float percent,SpeedTestReport uploadReport) {\r\n            }\r\n\r\n        });\r\n\r\n        speedTestSocket.startUpload(\"1.testdebit.info\", \r\n        \t\t\t\t\t\t\t80, \"/\", 10000000); //will block until upload is finished\r\n\r\n        return null;\r\n    }\r\n}\r\n```\r\n\r\nExecute it with : `new SpeedTestTask().execute();`\r\n\r\n## JavaDoc\r\n\r\n<a href=\"https://oss.sonatype.org/service/local/repositories/releases/archive/com/github/akinaru/speedtest/1.11/speedtest-1.11-javadoc.jar/!/index.html\">javadoc can be found here</a>\r\n\r\n## Features examples\r\n\r\nAll following examples use speed test server `1.testdebit.info`\r\n\r\n* download (10Mo)\r\n\r\n```\r\n./gradlew download\r\n```\r\n\r\n* upload (10Mo)\r\n\r\n```\r\n./gradlew upload\r\n```\r\n\r\n* download during a fixed duration (size: 100Mo, duration: 15s, report interval: 1s)\r\n\r\n```\r\n./gradlew fixedDownload\r\n```\r\n\r\n* upload during a fixed duration (size: 100Mo, duration: 15s, report interval: 1s)\r\n\r\n```\r\n./gradlew fixedUpload\r\n```\r\n\r\n* download repeatedly a file during a fixed duration (size:10Mo, duration 11s, report interval: 1s)\r\n\r\n```\r\n./gradlew repeatDownload\r\n```\r\n\r\n* upload repeatedly a file during a fixed duration (size:1Mo, duration 11s, report interval: 1s)\r\n\r\n```\r\n./gradlew repeatUpload\r\n```\r\n\r\n* successive 2 x (download + upload) repeatedly a file during a fixed duration (1 download size:1Mo, duration 3s, report interval: 1s following by 1 upload size:1Mo, duration 3s, report interval: 1s)\r\n\r\n```\r\n./gradlew repeatChain\r\n```\r\n\r\n## Compatibility\r\n\r\nJRE 1.7 compliant\r\n\r\n## Build\r\n\r\nGradle using IntelliJ IDEA or Eclipse\r\n\r\n## External libraries\r\n\r\n* https://github.com/akinaru/http-endec\r\n\r\n## SpeedTest Server tested\r\n\r\n* https://testdebit.info/\r\n\r\n## Tutorial \r\n\r\n* [Tutorial on how to integrate Speed Test library into your project](http://www.hirunawijesinghe.com/integrating-akinarus-speed-test-lib-into-android/) by Hiruna Wijesinghe\r\n\r\n## License\r\n\r\nThe MIT License (MIT) Copyright (c) 2016 Bertrand Martel\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}