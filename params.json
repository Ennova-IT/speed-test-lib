{
  "name": "Speed Test library",
  "tagline": "Speed Test library for Java/Android",
  "body": "# JSpeedTest\r\n\r\n[![Build Status](https://travis-ci.org/bertrandmartel/speed-test-lib.svg?branch=master)](https://travis-ci.org/bertrandmartel/speed-test-lib)\r\n[![Download](https://api.bintray.com/packages/akinaru/maven/speedtest/images/download.svg) ](https://bintray.com/akinaru/maven/speedtest/_latestVersion)\r\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.github.akinaru/speedtest/badge.svg)](https://maven-badges.herokuapp.com/maven-central/com.github.akinaru/speedtest)\r\n[![Coverage Status](https://coveralls.io/repos/github/bertrandmartel/speed-test-lib/badge.svg?branch=master)](https://coveralls.io/github/bertrandmartel/speed-test-lib?branch=master)\r\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/55e8e347e0d24566b37fe43799665e40)](https://www.codacy.com/app/kiruazoldik92/speed-test-lib?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=bertrandmartel/speed-test-lib&amp;utm_campaign=Badge_Grade)\r\n[![Javadoc](http://javadoc-badge.appspot.com/com.github.akinaru/speedtest.svg?label=javadoc)](http://javadoc-badge.appspot.com/com.github.akinaru/speedtest)\r\n[![License](http://img.shields.io/:license-mit-blue.svg)](LICENSE.md)\r\n\r\nSpeed Test client library for Java/Android with HTTP & FTP support\r\n\r\n* speed test download\r\n* speed test upload\r\n* download / upload progress monitoring\r\n* configurable hostname / port / uri (username & password for FTP)\r\n* configurable socket timeout and chunk size\r\n* configure upload file storage\r\n\r\nCheck a [non-exhaustive list](./server_list.md) of compatible speed test server.\r\n\r\n## Include in your project\r\n\r\n* with Gradle, from jcenter or mavenCentral :\r\n\r\n```\r\ncompile 'com.github.akinaru:speedtest:1.23'\r\n```\r\n\r\n## Usage\r\n\r\n* setup a speed test listener to monitor progress, completion and error catch :\r\n\r\n```\r\nSpeedTestSocket speedTestSocket = new SpeedTestSocket();\r\n\r\n// add a listener to wait for speedtest completion and progress\r\nspeedTestSocket.addSpeedTestListener(new ISpeedTestListener() {\r\n\r\n    @Override\r\n    public void onDownloadFinished(SpeedTestReport report) {\r\n        // called when download is finished\r\n        System.out.println(\"[DL FINISHED] rate in octet/s : \" + report.getTransferRateOctet());\r\n        System.out.println(\"[DL FINISHED] rate in bit/s   : \" + report.getTransferRateBit());\r\n    }\r\n\r\n    @Override\r\n    public void onDownloadError(SpeedTestError speedTestError, String errorMessage) {\r\n         // called when a download error occur\r\n    }\r\n\r\n    @Override\r\n    public void onUploadFinished(SpeedTestReport report) {\r\n        // called when an upload is finished\r\n        System.out.println(\"[UL FINISHED] rate in octet/s : \" + report.getTransferRateOctet());\r\n        System.out.println(\"[UL FINISHED] rate in bit/s   : \" + report.getTransferRateBit());\r\n    }\r\n\r\n    @Override\r\n    public void onUploadError(SpeedTestError speedTestError, String errorMessage) {\r\n        // called when an upload error occur\r\n    }\r\n\r\n    @Override\r\n    public void onDownloadProgress(float percent, SpeedTestReport report) {\r\n        // called to notify download progress\r\n        System.out.println(\"[DL PROGRESS] progress : \" + percent + \"%\");\r\n        System.out.println(\"[DL PROGRESS] rate in octet/s : \" + report.getTransferRateOctet());\r\n        System.out.println(\"[DL PROGRESS] rate in bit/s   : \" + report.getTransferRateBit());\r\n    }\r\n\r\n    @Override\r\n    public void onUploadProgress(float percent, SpeedTestReport report) {\r\n        // called to notify upload progress\r\n        System.out.println(\"[UL PROGRESS] progress : \" + percent + \"%\");\r\n        System.out.println(\"[UL PROGRESS] rate in octet/s : \" + report.getTransferRateOctet());\r\n        System.out.println(\"[UL PROGRESS] rate in bit/s   : \" + report.getTransferRateBit());\r\n    }\r\n\r\n    @Override\r\n    public void onInterruption() {\r\n        // triggered when forceStopTask is called\r\n    }\r\n});\r\n```\r\n\r\n### Download\r\n\r\n* HTTP download 1Mo from `2.testdebit.info`\r\n\r\n```\r\nspeedTestSocket.startDownload(\"2.testdebit.info\", \"/fichiers/1Mo.dat\");\r\n```\r\n\r\n* FTP download 1Mo from `speedtest.tele2.net`\r\n\r\n```\r\nspeedTestSocket.startFtpDownload(\"speedtest.tele2.net\", \"/1MB.zip\");\r\n```\r\n\r\n### Upload\r\n\r\n* HTTP upload 1Mo to `2.testdebit.info`\r\n\r\n```\r\nspeedTestSocket.startUpload(\"2.testdebit.info\", \"/\", 1000000);\r\n```\r\n\r\n* FTP upload a 1Mo file to `speedtest.tele2.net`\r\n\r\n```\r\nString fileName = SpeedTestUtils.generateFileName() + \".txt\";\r\nspeedTestSocket.startFtpUpload(\"speedtest.tele2.net\", \"/upload/\" + fileName, 1000000);\r\n```\r\n\r\n### Fixed duration download\r\n\r\nDownload during a fixed duration. Download will be stopped when the max duration is reached.\r\nAt the end of the max duration, `onInterruption` is called if download has not be fully completed\r\n\r\n* HTTP download for 10s max, a 100 Mo file from `2.testdebit.info`\r\n\r\n```\r\nspeedTestSocket.startFixedDownload(\"2.testdebit.info\", \"/fichiers/100Mo.dat\", 10000);\r\n```\r\n\r\n* FTP download for 10s max, a 100 Mo file from `speedtest.tele2.net`\r\n\r\n```\r\nspeedTestSocket.startFtpFixedDownload(\"speedtest.tele2.net\", \"/100MB.zip\");\r\n```\r\n\r\n### Fixed duration Upload\r\n\r\nUpload during a fixed duration. Upload will be stopped when the max duration is reached\r\nAt the end of the max duration, `onInterruption` is called if upload has not be fully completed\r\n\r\n* HTTP upload for 10s max, a 10Mo file to `2.testdebit.info`\r\n\r\n```\r\nspeedTestSocket.startFixedUpload(\"2.testdebit.info\", \"/\", 10000000, 10000);\r\n```\r\n\r\n* FTP upload for 10s max, a 10Mo file to `speedtest.tele2.net`\r\n\r\n```\r\nString fileName = SpeedTestUtils.generateFileName() + \".txt\";\r\nspeedTestSocket.startFtpFixedUpload(\"speedtest.tele2.net\", \"/upload/\" + fileName, 10000000, 10000);\r\n```\r\n\r\n### Define report interval\r\n\r\nYou can define your own report interval (interval between each `onDownloadProgress` & `onUploadProgress`) in milliseconds.\r\n\r\n* HTTP download with download reports each 1.5 seconds\r\n\r\n```\r\nspeedTestSocket.startDownload(\"2.testdebit.info\", \"/fichiers/1Mo.dat\", 1500);\r\n```\r\n\r\n* FTP download with download reports each 1.5 seconds\r\n\r\n```\r\nspeedTestSocket.startFtpDownload(\"speedtest.tele2.net\", \"/1MB.zip\", 1500);\r\n```\r\n\r\n* HTTP upload with upload reports each 1.5 seconds\r\n\r\n```\r\nspeedTestSocket.startUpload(\"2.testdebit.info\", \"/\", 10000000, 1500);\r\n```\r\n\r\n* FTP upload with upload reports each 1.5 seconds\r\n\r\n```\r\nString fileName = SpeedTestUtils.generateFileName() + \".txt\";\r\nspeedTestSocket.startFtpUpload(\"speedtest.tele2.net\", \"/upload/\" + fileName, 10000000, 1500);\r\n```\r\n\r\n### Chain download/upload requests\r\n\r\nYou can chain multiple download/upload requests during a fixed duration. This way, there will be as much download/upload request until the end of the period\r\n\r\n* download repeat\r\n\r\nThe following will download regularly for 20 seconds a file of 1Mo with download report each 2 seconds. Download reports will appear in `onReport` callback of `IRepeatListener` instead of `onDownloadProgress` :\r\n\r\n```\r\nspeedTestSocket.startDownloadRepeat(\"2.testdebit.info\", \"/fichiers/1Mo.dat\",\r\n    20000, 2000, new\r\n            IRepeatListener() {\r\n                @Override\r\n                public void onFinish(final SpeedTestReport report) {\r\n                    // called when repeat task is finished\r\n                }\r\n\r\n                @Override\r\n                public void onReport(final SpeedTestReport report) {\r\n                    // called when a download report is dispatched\r\n                }\r\n            });\r\n```\r\n\r\n* upload repeat\r\n\r\nThe following will upload regularly for 20 seconds a file of 1Mo with download report each 2 seconds. Upload reports will appear in `onReport` callback of `IRepeatListener` instead of `onUploadProgress` :\r\n\r\n```\r\nspeedTestSocket.startUploadRepeat(\"2.testdebit.info\", \"/\", 1000000\r\n    20000, 2000, new\r\n            IRepeatListener() {\r\n                @Override\r\n                public void onFinish(final SpeedTestReport report) {\r\n                    // called when repeat task is finished\r\n                }\r\n\r\n                @Override\r\n                public void onReport(final SpeedTestReport report) {\r\n                    // called when an upload report is dispatched\r\n                }\r\n            });\r\n```\r\n\r\n### Get live download & upload\r\n\r\n* retrieve current download report : \r\n```\r\nSpeedTestReport getLiveDownloadReport()\r\n```\r\n\r\n* retrieve current upload report : \r\n```\r\nSpeedTestReport getLiveUploadReport()\r\n```\r\n\r\n### Set upload file storage type\r\n\r\nBy default, data to be uploaded is stored in RAM, for large data it is recommended to used file storage : \r\n\r\n```\r\nspeedTestSocket.setUploadStorageType(UploadStorageType.FILE_STORAGE);\r\n```\r\n\r\nIt will create a temporary file containing random data. File will be deleted automatically at the end of the upload.\r\n\r\n### Set size of each packet sent to upload server\r\n\r\n```\r\nspeedTestSocket.setUploadChunkSize(65535);\r\n```\r\n\r\n### Set socket timeout value\r\n\r\nYou can set download/upload socket timeout in milliseconds :\r\n\r\n```\r\nspeedTestSocket.setSocketTimeout(5000);\r\n```\r\n\r\n### Set transfer rate precision\r\n\r\nThese settings are used to alter transfer rate float rounding / scale :\r\n\r\n* set RoundingMode :\r\n\r\n```\r\nspeedTestSocket.setDefaultRoundingMode(RoundingMode.HALF_EVEN);\r\n```\r\nDefault `RoundingMode` used for transfer rate calculation is `HALF_EVEN`. It can be override with : \r\n\r\n* set Scale :\r\n\r\n```\r\nspeedTestSocket.setDefaultScale(4);\r\n```\r\nDefault scale used for transfer rate calculation is 4\r\n\r\n## Android Integration\r\n\r\n* add Internet permission to manifest : \r\n```\r\n<uses-permission android:name=\"android.permission.INTERNET\" />\r\n```\r\n\r\n* use an `AsyncTask` to run your speed test :\r\n\r\n```\r\npublic class SpeedTestTask extends AsyncTask<Void, Void, String> {\r\n\r\n    @Override\r\n    protected String doInBackground(Void... params) {\r\n\r\n        SpeedTestSocket speedTestSocket = new SpeedTestSocket();\r\n\r\n        // add a listener to wait for speedtest completion and progress\r\n        speedTestSocket.addSpeedTestListener(new ISpeedTestListener() {\r\n\r\n            @Override\r\n            public void onDownloadFinished(SpeedTestReport report) {\r\n                // called when download is finished\r\n                Log.v(\"speedtest\", \"[DL FINISHED] rate in octet/s : \" + report.getTransferRateOctet());\r\n                Log.v(\"speedtest\", \"[DL FINISHED] rate in bit/s   : \" + report.getTransferRateBit());\r\n            }\r\n\r\n            @Override\r\n            public void onDownloadError(SpeedTestError speedTestError, String errorMessage) {\r\n                // called when a download error occur\r\n            }\r\n\r\n            @Override\r\n            public void onUploadFinished(SpeedTestReport report) {\r\n                // called when an upload is finished\r\n                Log.v(\"speedtest\", \"[UL FINISHED] rate in octet/s : \" + report.getTransferRateOctet());\r\n                Log.v(\"speedtest\", \"[UL FINISHED] rate in bit/s   : \" + report.getTransferRateBit());\r\n            }\r\n\r\n            @Override\r\n            public void onUploadError(SpeedTestError speedTestError, String errorMessage) {\r\n                // called when an upload error occur\r\n            }\r\n\r\n            @Override\r\n            public void onDownloadProgress(float percent, SpeedTestReport report) {\r\n                // called to notify download progress\r\n                Log.v(\"speedtest\", \"[DL PROGRESS] progress : \" + percent + \"%\");\r\n                Log.v(\"speedtest\", \"[DL PROGRESS] rate in octet/s : \" + report.getTransferRateOctet());\r\n                Log.v(\"speedtest\", \"[DL PROGRESS] rate in bit/s   : \" + report.getTransferRateBit());\r\n            }\r\n\r\n            @Override\r\n            public void onUploadProgress(float percent, SpeedTestReport report) {\r\n                // called to notify upload progress\r\n                Log.v(\"speedtest\", \"[UL PROGRESS] progress : \" + percent + \"%\");\r\n                Log.v(\"speedtest\", \"[UL PROGRESS] rate in octet/s : \" + report.getTransferRateOctet());\r\n                Log.v(\"speedtest\", \"[UL PROGRESS] rate in bit/s   : \" + report.getTransferRateBit());\r\n            }\r\n\r\n            @Override\r\n            public void onInterruption() {\r\n                // triggered when forceStopTask is called\r\n            }\r\n        });\r\n\r\n        speedTestSocket.startDownload(\"2.testdebit.info\", \"/fichiers/1Mo.dat\");\r\n\r\n        return null;\r\n    }\r\n}\r\n```\r\n\r\nExecute it with : `new SpeedTestTask().execute();`\r\n\r\n## Features examples\r\n\r\nAll following examples use speed test server `1.testdebit.info` for HTTP and `speedtest.tele2.net` for FTP\r\n\r\n* HTTP download (1Mo)\r\n\r\n```\r\n./gradlew downloadFile\r\n```\r\n\r\n* HTTP upload (1Mo)\r\n\r\n```\r\n./gradlew uploadFile\r\n```\r\n\r\n* FTP download (1Mo)\r\n\r\n```\r\n./gradlew downloadFTP\r\n```\r\n\r\n* FTP upload (1Mo)\r\n\r\n```\r\n./gradlew uploadFTP\r\n```\r\n\r\n* download during a fixed duration (size: 100Mo, duration: 15s, report interval: 1s)\r\n\r\n```\r\n./gradlew fixedDownload\r\n```\r\n\r\n* upload during a fixed duration (size: 100Mo, duration: 15s, report interval: 1s)\r\n\r\n```\r\n./gradlew fixedUpload\r\n```\r\n\r\n* download repeatedly a file during a fixed duration (size:10Mo, duration 11s, report interval: 1s)\r\n\r\n```\r\n./gradlew repeatDownload\r\n```\r\n\r\n* upload repeatedly a file during a fixed duration (size:1Mo, duration 11s, report interval: 1s)\r\n\r\n```\r\n./gradlew repeatUpload\r\n```\r\n\r\n* successive 2 x (download + upload) repeatedly a file during a fixed duration (1 download size:1Mo, duration 3s, report interval: 1s following by 1 upload size:1Mo, duration 3s, report interval: 1s)\r\n\r\n```\r\n./gradlew repeatChain\r\n```\r\n\r\n## Speed Test issues\r\n\r\nIt's important to choose an adequate speed test server depending on latency/jitter. This library is **not** responsible for the speed test server choice.\r\n\r\nNote that this library :\r\n* doesn't adjust the chunk size depending on the connection speed either\r\n* doesn't provide pre-estimation of the connection speed based on small chunk sent to/from server\r\n* doesn't detect anomaly either (for instance taking away X% slowest chunk and X% fastest chunk downloaded)\r\n\r\nThis library does provide an average of transfer rate for all individual chunks read/written for download/upload.\r\n\r\nThe 2 following links describe the process of speedtest.net :\r\n* http://www.ookla.com/support/a21110547/what-is-the-test-flow-and-methodology-for-the-speedtest\r\n* https://support.speedtest.net/hc/en-us/articles/203845400-How-does-the-test-itself-work-How-is-the-result-calculated-\r\n\r\n## Compatibility\r\n\r\nJRE 1.7 compliant\r\n\r\n## Build & test\r\n\r\n* build without test :\r\n\r\n```\r\n./gradlew clean build -x test\r\n```\r\n\r\n* build with test :\r\n\r\n```\r\n./gradlew clean build\r\n```\r\n\r\n* run specific test\r\n\r\n```\r\n./gradlew test --tests \"fr.bmartel.speedtest.test.SpeedTestFunctionalTest\"\r\n```\r\n\r\n## External libraries\r\n\r\n* [http-endec](https://github.com/bertrandmartel/http-endec)\r\n* [Apache Commons Net](https://commons.apache.org/proper/commons-net/)\r\n\r\n## License\r\n\r\nThe MIT License (MIT) Copyright (c) 2016 Bertrand Martel\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}