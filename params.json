{"name":"Speed-test-lib","tagline":"Speed Test library for Java / Android","body":"# Speed Test library for Java / Android  #\r\n\r\nhttp://akinaru.github.io/speed-test-lib/\r\n\r\n<i>Last update 26/05/2015</i>\r\n\r\nSpeed Test library featuring :\r\n\r\n* speed test download with transfer rate output\r\n* speed test upload with transfer rate output\r\n* download and upload progress monitoring\r\n* speed test server / port / uri can be configured easily\r\n\r\nLibrary is available in release folder, buildable with build.xml ant file.\r\n\r\n* For download process, library will download file from given speed test server parameters and calculate transfer rate for downloading this file from server\r\n* For upload process, library will generate a random file with a given size and will upload this file to a server calculating transfer rate for uploading this file to server\r\n\r\n<hr/>\r\n\r\n<h3>How to use ?</h3>\r\n\r\n<b>Instanciate SpeedTest class</b>\r\n\r\n```\r\nSpeedTestSocket speedTestSocket = new SpeedTestSocket();\r\n```\r\n<b>Add a listener to monitor</b>\r\n\r\n* download process result with ``onDownloadPacketsReceived`` callback\r\n* upload process result with ``onUploadPacketsReceived`` callback\r\n* download progress with ``onDownloadProgress`` callback\r\n* upload progress with ``onUploadProgress`` callback\r\n* download error catch with ``onDownloadError``\r\n* upload error catch with ``onUploadError``\r\n\r\n```\r\nspeedTestSocket.addSpeedTestListener(new ISpeedTestListener() {\r\n\r\n\t@Override\r\n\tpublic void onDownloadPacketsReceived(int packetSize, float transferRateBitPerSeconds, float transferRateOctetPerSeconds) {\r\n\t\tSystem.out.println(\"download transfer rate  : \" + transferRateBitPerSeconds + \" bps\");\r\n\t\tSystem.out.println(\"download transfer rate  : \" + transferRateOctetPerSeconds + \"Bps\");\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onDownloadError(int errorCode, String message) {\r\n\t\tSystem.out.println(\"Download error \" + errorCode + \" occured with message : \" + message);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onUploadPacketsReceived(int packetSize, float transferRateBitPerSeconds, float transferRateOctetPerSeconds) {\r\n\t\tSystem.out.println(\"download transfer rate  : \" + transferRateBitPerSeconds + \" bps\");\r\n\t\tSystem.out.println(\"download transfer rate  : \" + transferRateOctetPerSeconds + \"Bps\");\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onUploadError(int errorCode, String message) {\r\n\t\tSystem.out.println(\"Upload error \" + errorCode + \" occured with message : \" + message);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onDownloadProgress(int percent) {\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void onUploadProgress(int percent) {\r\n\t}\r\n\r\n});\r\n\r\n```\r\n\r\n<b>Start Download speed test</b>\r\n\r\n``void startDownload(String hostname, int port, String uri)``\r\n\r\n* `hostname` : server hostname\r\n* `port` : server port\r\n* `uri` : uri to fetch your file from server\r\n\r\n```\r\nspeedTestSocket.startDownload(\"ipv4.intuxication.testdebit.info\", 80,\"/fichiers/10Mo.dat\");\r\n```\r\nYou can wait for test completion with ``closeSocketJoinRead()`` which is prefered to ``closeSocket()`` since it join reading thread before resuming application.\r\n\r\n```\r\nspeedTestSocket.closeSocketJoinRead();\r\n```\r\n\r\n<b>Start Upload speed test</b>\r\n\r\n```\r\nvoid startUpload(String hostname, int port, String uri, int fileSizeOctet)\r\n```\r\n\r\n* `hostname` : server hostname\r\n* `port` : server port\r\n* `uri` : uri to fetch your file from server\r\n* `fileSizeOctet` : the file size to be uploaded to server (file will be generated randomly and sent to speed test server)\r\n\r\nHere is an example for a file of 10Moctet :\r\n```\r\nspeedTestSocket.startUpload(\"1.testdebit.info\", 80, \"/\", 10000000);\r\n```\r\n<hr/>\r\n\r\n<h3>Quick test command line syntax</h3> \r\n\r\n``java -jar speed-test-lib-1.0.jar``\r\n\r\nin folder ./http-endec-java/release\r\n\r\n<hr/>\r\n\r\n* Project is JRE 1.7 compliant\r\n* You can build it with ant => build.xml\r\n* Development on Eclipse \r\n\r\n<b>Tested with</b>\r\n\r\n* https://testdebit.info/\r\n\r\n<h3>TODO</h3>\r\n\r\nmanage unexpected socket disconnection for downloading and uploading\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}